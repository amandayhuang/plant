{"version":3,"sources":["Components/Home.jsx","Components/Joke.jsx","Components/AppBar.jsx","App.js","Components/Root.jsx","serviceWorker.js","index.js"],"names":["Home","setValue","handleClick","val","Box","display","alignItems","width","height","justifyContent","flexDirection","className","onClick","Joke","useState","joke","setJoke","useEffect","getJoke","a","settings","async","url","method","headers","Accept","axios","data","Button","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","p","Typography","a11yProps","LinkTab","Tab","component","event","preventDefault","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","NavTabs","React","AppBar","position","Tabs","variant","onChange","newValue","aria-label","label","App","path","Root","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bdc4249.chunk.js","sourcesContent":["import React from 'react';\nimport { Box } from \"@material-ui/core\";\nimport './Home.css'\n\n\n\nconst Home = ({setValue}) => {\n\n    const handleClick = (val) =>{\n        setValue(val)\n    }\n\n    return (\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        width=\"100%\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          className=\"box\"\n        >\n          <Box display=\"flex\" >\n            <Box className=\"button\" onClick={() => handleClick(1)}>tell me a joke</Box>\n            <Box className=\"button\" onClick={() => handleClick(2)}>ask me a question</Box>\n          </Box>\n          <Box display=\"flex\" >\n            <Box className=\"button\" onClick={() => handleClick(3)}>teach me something</Box>\n            <Box className=\"button\" onClick={() => handleClick(4)}>show me something</Box>\n          </Box>\n        </Box>\n      </Box>\n    );\n}\n\nexport default Home","import { Box, Button } from '@material-ui/core'\nimport React, {useEffect, useState} from 'react'\nimport axios from 'axios'\n\nconst Joke = () =>{\n\n    const [joke, setJoke] = useState('')\n\n    useEffect(() =>{\n        getJoke()\n    },[])\n    \n    const getJoke = async () =>{\n        const settings = {\n            async: true,\n            url: \"https://icanhazdadjoke.com/\",\n            method: \"GET\",\n            headers: {\n            Accept: `application/json`,\n            },\n        };\n\n        try {\n            const { data } = await axios(settings);\n            setJoke(data.joke)\n        } catch (error) {\n            setJoke('Error fetching joke...')\n        }\n\n        \n    }\n    \n    return (\n        <>\n        <Box>{joke}</Box>\n        <Button onClick={getJoke}>Another</Button>\n        </>\n    )\n}\n\nexport default Joke","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Home from '../Components/Home'\nimport Joke from '../Components/Joke'\nimport HomeIcon from \"@material-ui/icons/Home\"\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`nav-tabpanel-${index}`}\n      aria-labelledby={`nav-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `nav-tab-${index}`,\n    \"aria-controls\": `nav-tabpanel-${index}`,\n  };\n}\n\nfunction LinkTab(props) {\n  return (\n    <Tab\n      component=\"a\"\n      onClick={(event) => {\n        event.preventDefault();\n      }}\n      {...props}\n    />\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function NavTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n      <>\n      <AppBar position=\"static\">\n        <Tabs\n          variant=\"fullWidth\"\n          value={value}\n          onChange={handleChange}\n          aria-label=\"nav tabs example\"\n        >\n          <LinkTab label={<HomeIcon/>} {...a11yProps(0)} />\n          <LinkTab label=\"Joke\"  {...a11yProps(1)} />\n          <LinkTab label=\"Question\"  {...a11yProps(2)} />\n          <LinkTab label=\"Teach\"  {...a11yProps(3)} />\n          <LinkTab label=\"Show\"  {...a11yProps(3)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <Home setValue={setValue} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Joke />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        Page Three\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        Page Four\n      </TabPanel>\n      <TabPanel value={value} index={4}>\n        Page Five\n      </TabPanel>\n      </>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './Components/Home'\nimport Joke from './Components/Joke'\nimport AppBar from './Components/AppBar'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      {/* <ProtectedRoute path='/stocks' component={NavBarContainerAuth} />\n      <ProtectedRoute exact path='/portfolio' component={NavBarContainerAuth} />\n      <ProtectedRoute exact path='/portfolio' component={PortfolioContainer} />\n      <ProtectedRoute path='/stocks/:stockId' component={StockShowContainer} /> */}\n\n      {/* <Switch> */}\n      <Route path=\"/\" component={AppBar} />\n      {/* <Route path=\"/\" exact component={Home} /> */}\n\n      {/* </Switch> */}\n{/* \n      <Route path=\"/joke\" exact component={Joke} />\n      <Route path=\"/question\" exact component={Home} />\n      <Route path=\"/teach\" exact component={Home} />\n      <Route path=\"/show\" exact component={Home} /> */}\n    </div>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"../App\";\n\nconst Root = ({ store }) => (\n    <HashRouter>\n      <App />\n    </HashRouter>\n);\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Components/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}